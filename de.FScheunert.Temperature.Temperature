/**

This class was made by Florian Scheunert
created 14.08.2019

**/

package de.FScheunert.Temperature;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;

public class Temperature {

	/*
	 * Main-Methode
	 * Erstellt eine neue Instanz von SQLManager und öffnet eine Versucht eine neue Verbindung zur Datenbank herzustellen
	 * --> Keine Verbindung Verfügbar: Programm Ende
	 *
	 * Zwei neue Threads werden gestartet mit jeweils einer neuen Instanz von TimeExecutor als Runnable-Klasse
	 */
	public static void main(String[] args) throws SQLException {
		SQLManager sql = new SQLManager("localhost", 3306, "temperature", "admin", "1234");
		sql.connect();
		if(!sql.isConnected()) {
			System.out.println("---\nDie Verbindung zu SQL konnte nicht hergestellt werden!\n---");
			System.exit(0);
			return;
		}

		new Thread(new TimeExecutor(60000L * sql.getIntervall(), new Temperature(sql), "writeData")).start();
		new Thread(new TimeExecutor(601000*6, sql, "reconnect")).start();
	}

	private SQLManager sql;

	public Temperature(SQLManager sql) {
		this.sql = sql;
	}

	/*
	 * Trägt die neuen Werte von beiden Sensoren in die Datenbank ein
	 * Updated den Intervall, in welchem die Temperatur gemessen werde soll.
	 */
	public void writeData() {
		try {
			sql.update(1, getTemperature("28-02069177225a"));
			sql.update(2, getTemperature("28-020691771ca2"));
			TimeExecutor.getExecutor("writeData").setDelay(60000L * sql.getIntervall());
		} catch (IOException | SQLException e) {
			e.printStackTrace();
		}
	}

	/*
	 * Liest die Temperatur von dem Sensor mit übergebener ID aus
	 * Das Ergebnis wird als Double und auf drei Nachkommastellen gerundet zurückgegeben.
	 */
	private Double getTemperature(String sensorID) throws IOException {
		File file = new File("/sys/bus/w1/devices/" + sensorID + "/w1_slave");
		BufferedReader bf = new BufferedReader(new FileReader(file));
		bf.readLine();
		String sTemperature = bf.readLine();
		bf.close();
		return round(Double.parseDouble(sTemperature.split("=")[1])/1000D, 2);
	}

	/*
	 * Rundet den übergebenen Double auf die angegebenen Nachkommastellen
	 */
	private double round(double value, int roundTo) {
		double d = Math.pow(10, roundTo);
		return Math.round(value * d) / d;
	}

}
