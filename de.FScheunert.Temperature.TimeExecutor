/**

This class was made by Florian Scheunert
created 14.08.2019

**/

package de.FScheunert.Temperature;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;

public class TimeExecutor implements Runnable {

	private static HashMap<String, TimeExecutor> executors = new HashMap<>();

	public static TimeExecutor getExecutor(String method) {
		return executors.containsKey(method) ? executors.get(method) : null;
	}

	private long delay;
	private Object instance;
	private String method;

	public TimeExecutor(long delay, Object instance, String method) {
		this.delay = delay;
		this.instance = instance;
		this.method = method;

		executors.put(method, this);
	}

	private void execute() throws InterruptedException, IllegalAccessException, IllegalArgumentException,
									InvocationTargetException, NoSuchMethodException, SecurityException {

		instance.getClass().getMethod(method).invoke(instance);
		Thread.sleep(delay);
		execute();
	}

	@Override
	public void run() {
		try {
			execute();
		} catch (InterruptedException | IllegalAccessException | IllegalArgumentException
				| InvocationTargetException | NoSuchMethodException | SecurityException e) {
			e.printStackTrace();
		}
	}

	public void setDelay(long newDelay) {
		this.delay = newDelay;
	}

}
